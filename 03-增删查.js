// 03 | 增删查：掌握数据处理的基本操作，以不变应万变
// 要想灵活使用数据结构，需要先弄清楚数据在代码中被处理、加工的最小单位动作，也就是数据结构的基本操作，有了这些动作之后，就可以
// 基于此去选择更合适的数据结构了。
// 数据处理的基本操作
// 不管事数组还是字典，都需要额外开辟空间，对数据进行存储。而且数据存储的数量，与输入的数据量一致。因此，消耗的空间复杂度相同，
// 都是 O(n)。同样采用复杂的数据结构，消耗了 O(n) 的空间复杂度，其对时间复杂度降低的贡献有可能不一样。因此，我们必须要设计
// 合理的数据结构，以达到降低时间损耗的目的。
// 而设计合理的数据结构，又要从问题本身出发，我们可以采用这样的思考顺序：
// 首先我们分析这段代码到底对数据先后进行了哪些操作。
// 然后再根据分析出来的数据操作，找到合理的数据结构。
// 数据处理的操作就是找到需要处理的数据，计算结果，再把结果保存下来。这个过程总结为以下操作：
// 找到要处理的数据。这就是按照某些条件进行查找。
// 把结果存到一个新的内存空间中。这就是在现有数据上进行新增。
// 把结果存到一个已使用的内存空间中。这需要先删除内存空间中的已有数据，再新增新的数据。
// 经过对代码的拆解，你会发现即便是很复杂的代码，它对数据的处理也只有这 3 个基本操作，增、删、查。只要围绕这 3 个数据处理的操作
// 进行分析，就能得出解决问题的最优方案。常用的分析方法可以参考下面的 3 个步骤：
// 首先，这段代码对数据进行了哪些操作？
// 其次，这些操作中，哪个操作最影响效率，对时间复杂度的损耗最大？
// 最后，哪种数据结构最能帮助你提高数据操作的使用效率？
// 这 3 个步骤构成了设计合理数据结构的方法论。

// 数据操作与数据结构的案例
// 关于查找的例子。查找，就是从复杂的数据结构中，找到满足某个条件的元素。通常可从以下两个方面来对数据进行查找操作：
// 根据元素的位置或索引来查找。
// 根据元素的数值特征来查找。
// 例 1，对于一个数组，找到数组中的第二个元素并输出。
// 这个问题的处理很简单。由于数组本身具有索引 index，因此直接通过索引就能查找到其第二个元素。数组的索引值是从 0 开始的，因此第二个
// 元素的索引值是 1。不难发现，因为有了 index 的索引，所以我们就可以直接进行查找操作来，这里的时间复杂度为 O(1)。
// 例 2，如果是链表，如何找到这个链表中的第二个元素并输出呢？
// 链表和数组一样，都是 O(n) 空间复杂度的复杂数据结构。但其区别之一就是，数组有 index 索引，而链表没有。链表是通过指针，让元素按
// 某个自定义的顺序“手拉手”连接在一起的。
// 既然是这样，要查找其第二个元素，就必须要先知道第一个元素在哪里。以此类推，链表中某个位置的元素的查找，只能通过从前往后的顺序逐一
// 去查找。不难发现，链表因为没有索引，只能“一个接一个”地按照位置条件查找，在这种情况下时间复杂度就是 O(n)。
